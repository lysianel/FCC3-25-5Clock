{"version":3,"sources":["components/clock.js","App.js","serviceWorker.js","index.js"],"names":["Setup","props","className","id","type","charAt","toUpperCase","slice","onClick","decrease","icon","faArrowCircleDown","length","increase","faArrowCircleUp","Timer","minutes","Math","floor","timeLeft","seconds","currentType","defaultState","sessionLength","breakLength","run","Clock","state","increaseLength","bind","decreaseLength","startStop","timeout","time","reset","event","currentTarget","this","setState","document","querySelector","play","timer","window","setInterval","clearInterval","audio","pause","currentTime","faPlay","faPause","faSyncAlt","src","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d3045621.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faPause, faSyncAlt, faArrowCircleUp, faArrowCircleDown } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n//Set up block // Session or Break \r\nconst Setup = (props) => {\r\n\treturn(\r\n\t\t<div className=\"setup\">\r\n\t\t\t<div id={props.type + \"-label\"}>\r\n\t\t\t\t{props.type.charAt(0).toUpperCase()+props.type.slice(1)} Length\r\n\t\t\t</div>\r\n\t\t\t<div id={props.type + \"-decrement\"} onClick={props.decrease}>\r\n\t\t\t\t<FontAwesomeIcon className=\"icon\" icon={faArrowCircleDown} />\r\n\t\t\t</div>\r\n\t\t\t<div id={props.type + \"-length\"}>\r\n\t\t\t\t{props.length}\r\n\t\t\t</div>\r\n\t\t\t<div id={props.type + \"-increment\"} onClick={props.increase}>\r\n\t\t\t\t<FontAwesomeIcon className=\"icon\" icon={faArrowCircleUp} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n// Timer block\r\nconst Timer = (props) => {\r\n\t//format the time left in mm:ss\r\n\tlet minutes = Math.floor(props.timeLeft/60); \r\n\tlet seconds = (props.timeLeft - minutes *60);\r\n\r\n\tminutes = minutes < 10 ? ('0' + minutes) : minutes;\r\n\tseconds = seconds < 10 ? ('0' + seconds) : seconds;\r\n\r\n\treturn(\r\n\t\t<div id=\"timer\">\r\n\t\t\t<div id=\"timer-label\">\r\n\t\t\t\t{props.currentType.toUpperCase()}\r\n\t\t\t</div>\r\n\t\t\t<div id=\"time-left\">\r\n\t\t\t\t{minutes + \":\" + seconds}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n// Default Settings\r\nconst defaultState = {\r\n\tsessionLength:25,\r\n\tbreakLength:5,\r\n\tcurrentType:\"session\",\r\n\ttimeLeft:25*60,\r\n\trun:false\r\n}\r\n\r\n// Clock Component \r\nclass Clock extends Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state=defaultState;\r\n\r\n\t\tthis.increaseLength=this.increaseLength.bind(this);\r\n\t\tthis.decreaseLength=this.decreaseLength.bind(this);\r\n\t\tthis.startStop=this.startStop.bind(this);\r\n\t\tthis.timeout=this.timeout.bind(this);\r\n\t\tthis.time=this.time.bind(this);\r\n\t\tthis.reset=this.reset.bind(this);\r\n\r\n\t}\r\n\r\n\t//increase session or break duration \r\n\tincreaseLength(event){\r\n\t\tif (event.currentTarget.id == \"session-increment\"){\r\n\t\t\tif (this.state.sessionLength < 60 ){\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsessionLength:this.state.sessionLength + 1,\r\n\t\t\t\t\ttimeLeft: this.state.timeLeft + 60\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.state.breakLength < 60 ){\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tbreakLength:this.state.breakLength + 1,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//decrease session or break duration \r\n\tdecreaseLength(event){\r\n\t\tif (event.currentTarget.id == \"session-decrement\"){\r\n\t\t\tif (this.state.sessionLength > 1 ){\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsessionLength:this.state.sessionLength - 1,\r\n\t\t\t\t\ttimeLeft: this.state.timeLeft - 60\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.state.breakLength > 1 ){\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tbreakLength:this.state.breakLength - 1,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//start and stop the timer\r\n\tstartStop(){\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\trun:!this.state.run\r\n\t\t\t})\r\n\r\n\t\t\tthis.time();\r\n\t}\r\n\r\n\t// manage timeout : beep, change session/break, reset time and start timer\r\n\ttimeout(){\r\n\r\n\t\tdocument.querySelector(\"audio\").play();\r\n\r\n\t\tif (this.state.currentType ===\"session\"){\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\ttimeLeft:this.state.breakLength * 60, \r\n\t\t\t\t\t\tcurrentType:\"break\"\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\ttimeLeft:this.state.sessionLength * 60, \r\n\t\t\t\t\t\tcurrentType:\"session\"\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\tthis.time();\r\n\t\t\r\n\t}\r\n\r\n\t//timer\r\n\ttime(){\r\n\t\t\t\t\r\n\t\tlet timer=window.setInterval(()=>{\r\n\t\t\t//run with enough time left\r\n\t\t\tif (this.state.timeLeft > 0 && this.state.run){\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttimeLeft: this.state.timeLeft-1,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\t//timeout -> stop and switch to next type\r\n\t\t\telse if (this.state.timeLeft===0){\r\n\t\t\t\tclearInterval(timer);\r\n\t\t\t\tthis.timeout();\r\n\t\t\t}\r\n\r\n\t\t\t//pause\r\n\t\t\telse {\r\n\t\t\t\tclearInterval(timer);\r\n\t\t\t}\r\n\t\t},1000);\r\n\t}\r\n\r\n\t//reset audio and state\r\n\treset(){\r\n\t\tlet audio = document.querySelector(\"audio\")\r\n\t\taudio.pause();\r\n\t\taudio.currentTime=0;\r\n\t\tthis.setState(defaultState);\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"clock\">\r\n\t\t\t\t<h1>25 + 5 Clock</h1>\r\n\t\t\t\t<Setup\r\n\t\t\t\t\ttype=\"session\"\r\n\t\t\t\t\tlength={this.state.sessionLength} \r\n\t\t\t\t\tincrease={this.increaseLength}\r\n\t\t\t\t\tdecrease={this.decreaseLength}\r\n\t\t\t\t/>\r\n\t\t\t\t<Setup\r\n\t\t\t\t\ttype=\"break\"\r\n\t\t\t\t\tlength={this.state.breakLength} \r\n\t\t\t\t\tincrease={this.increaseLength}\r\n\t\t\t\t\tdecrease={this.decreaseLength}\r\n\t\t\t\t/>\r\n\t\t\t\t<Timer \r\n\t\t\t\t\tcurrentType={this.state.currentType}\r\n\t\t\t\t\ttimeLeft= {this.state.timeLeft}\r\n\t\t\t\t/>\r\n\t\t\t\t<div id=\"start_stop\" onClick={this.startStop}>\r\n\t\t\t\t\t<FontAwesomeIcon className=\"icon\" icon={faPlay} />\r\n\t\t\t\t\t<FontAwesomeIcon className=\"icon\" icon={faPause} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id=\"reset\" onClick={this.reset}>\r\n\t\t\t\t\t<FontAwesomeIcon className=\"icon\" icon={faSyncAlt} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<audio id=\"beep\" src=\"https://raw.githubusercontent.com/lysianel/FCC3-25-5Clock/master/25_5_clock/public/beep.mp3\"></audio>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Clock;","import React from 'react';\nimport './App.css';\nimport Clock from './components/clock';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Clock/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}